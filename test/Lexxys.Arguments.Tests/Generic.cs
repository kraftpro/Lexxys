//// <auto-generated/>
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;

//using Lexxys;

//#pragma warning disable
//#nullable enable

//namespace Lexxys.Argument.Tests
//{
//	partial class SampleOption: ICliOption<SampleOption>
//	{
//		public static SampleOption ParseArguments(IReadOnlyCollection<string> args) => Parse(CreateBuilder().Build(args).Container);
//		public static ArgumentsBuilder CreateBuilder() => Build(new ArgumentsBuilder());

//		public static SampleOption Parse(ArgumentCommand c) => new SampleOption
//		{
//			Alpha = c.Parameters.Value<float>("Alpha)", default),
//			Beta = c.Parameters.Value<float>("Beta)", default),
//			Gamma = c.Parameters.Value<float>("Gamma)", default),
//			Input = c.Parameters.Value<FileInfo?>("Input)", default),
//			Output = c.Parameters.Value<FileInfo?>("Output)", default),
//			Create = c.Command?.Name == "Create" ? CommandCreate.Parse(c.Command) : null,
//			Delete = c.Command?.Name == "Delete" ? CommandDelete.Parse(c.Command) : null,
//		};

//		public static ArgumentsBuilder Build(ArgumentsBuilder? builder = null) => (builder ?? new ArgumentsBuilder())
//			.Parameter("Alpha", __aliases[0], valueName: "alpha", description: "alpha option")
//			.Parameter("Beta", __aliases[1], valueName: "beta", description: "beta option")
//			.Parameter("Gamma", __aliases[2], valueName: "gamma", description: "gamma option")
//			.Parameter("Input", __aliases[3], valueName: "input", description: "input file")
//			.Parameter("Output", __aliases[4], valueName: "output", description: "output file")
//			.Command<CommandCreate>("Create", __aliases[5], description: "Create something")
//			.Command<CommandDelete>("Delete", __aliases[6], description: "Delete something");

//		private static readonly string[][] __aliases = [["a"], ["b", "bt"], ["c", "g"], ["i"], ["o"], ["new"], ["del"]];

//		partial class CommandCreate: ICliOption<CommandCreate>
//		{
//			public static CommandCreate ParseArguments(IReadOnlyCollection<string> args) => Parse(CreateBuilder().Build(args).Container);
//			public static ArgumentsBuilder CreateBuilder() => Build(new ArgumentsBuilder());

//			public static CommandCreate Parse(ArgumentCommand c) => new CommandCreate
//			{
//				Alpha = c.Parameters.Value<int>("Alpha)", default),
//				Beta = c.Parameters.Value<int>("Beta)", default),
//				Gamma = c.Parameters.Value<int>("Gamma)", default),
//			};

//			public static ArgumentsBuilder Build(ArgumentsBuilder? builder = null) => (builder ?? new ArgumentsBuilder())
//				.Parameter("Alpha", __aliases[0], description: "alpha option")
//				.Parameter("Beta", __aliases[1], description: "beta option")
//				.Parameter("Gamma", __aliases[2], description: "gamma option");

//			private static readonly string[][] __aliases = [["a"], ["b"], ["c"]];
//		}

//		partial class CommandDelete: ICliOption<CommandDelete>
//		{
//			public static CommandDelete ParseArguments(IReadOnlyCollection<string> args) => Parse(CreateBuilder().Build(args).Container);
//			public static ArgumentsBuilder CreateBuilder() => Build(new ArgumentsBuilder());

//			public static CommandDelete Parse(ArgumentCommand c) => new CommandDelete
//			{
//				Alpha = c.Parameters.Value<int>("Alpha)", default),
//				Beta = c.Parameters.Value<int>("Beta)", default),
//				Gamma = c.Parameters.Value<int>("Gamma)", default),
//			};

//			public static ArgumentsBuilder Build(ArgumentsBuilder? builder = null) => (builder ?? new ArgumentsBuilder())
//				.Parameter("Alpha", __aliases[0])
//				.Parameter("Beta", __aliases[1], valueName: "beta", description: "bbb")
//				.Parameter("Gamma", __aliases[2]);

//			private static readonly string[][] __aliases = [["a"], ["b", "bb", "bbb"], ["c", "cc", "ccc"]];
//		}
//	}
//}
